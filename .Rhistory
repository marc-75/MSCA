min_seq_freq = 0.03,
min_conditional_prob = 0,
min_relative_risk = 0
)
source("~/Documents/PACKAGES/MSCA/R/seq_stats.R", echo = TRUE)
seq_data <- get_cluster_sequences(
dt =  EHR_cl ,
cens = 'cens',
cl_col = "cl",
id_col = "link_id",
event_col = "reg",
k = 2
)
sequence_stats(
seq_data = dt_seq ,
min_seq_freq = 0.03,
min_conditional_prob = 0,
min_relative_risk = 0
)
sequence_stats(
seq_data = seq_data ,
min_seq_freq = 0.03,
min_conditional_prob = 0,
min_relative_risk = 0
)
source("~/Documents/PACKAGES/MSCA/R/seq_stats.R", echo = TRUE)
sequence_stats(
seq_data = seq_data ,
min_seq_freq = 0.03,
min_conditional_prob = 0,
min_relative_risk = 0
)
source("~/Documents/PACKAGES/MSCA/R/seq_stats.R", echo = TRUE)
sequence_stats(
seq_data = seq_data ,
min_seq_freq = 0.03,
min_conditional_prob = 0,
min_relative_risk = 0
)
source("~/Documents/PACKAGES/MSCA/R/seq_stats.R", echo = TRUE)
sequence_stats(
seq_data = seq_data ,
min_seq_freq = 0.03,
min_conditional_prob = 0,
min_relative_risk = 0
)
source("~/Documents/PACKAGES/MSCA/R/seq_stats.R", echo = TRUE)
sequence_stats(
seq_data = seq_data ,
min_seq_freq = 0.03,
min_conditional_prob = 0,
min_relative_risk = 0
)
source("~/Documents/PACKAGES/MSCA/R/seq_stats.R", echo = TRUE)
sequence_stats(
seq_data = seq_data ,
min_seq_freq = 0.03,
min_conditional_prob = 0,
min_relative_risk = 0
)
source("~/Documents/PACKAGES/MSCA/R/seq_stats.R", echo = TRUE)
sequence_stats(
seq_data = seq_data ,
min_seq_freq = 0.03,
min_conditional_prob = 0,
min_relative_risk = 0
)
dt_aos2 <- dt_aos %>%
filter(.data[[cl_col]] == ns2  ) %>% select( -all_of( c(n , cl_col) ) )   # <- THIS is correct
source("~/Documents/PACKAGES/MSCA/R/seq_stats.R", echo = TRUE)
sequence_stats(
seq_data = seq_data ,
min_seq_freq = 0.03,
min_conditional_prob = 0,
min_relative_risk = 0
)
library(MSCA)
library(dplyr)
data(EHR)
head(EHR)
EHR %>%
nrow()
# Get a data frame with patient id and cluster assignation
df1 <- data.frame( link_id = names(ct_mat_8) , cl = paste0('cl_',ct_mat_8))
head(df1)
# Merge with primary data
EHR_cl <- EHR %>%
left_join( df1 )
# Get cluster sequences by cluster
dt_seq <- get_cluster_sequences(
dt =  EHR_cl ,
cl_col = "cl",
id_col = "link_id",
event_col = "reg",
k = 2
)
# Get basic stats by cluster
sequence_stats(
seq_data = dt_seq ,
min_seq_freq = 0.03,
min_conditional_prob = 0,
min_relative_risk = 0
)
#devtools::install()
devtools::build()
devtools::install(build_vignettes = T)
#devtools::install()
devtools::build()
detach("package:MSCA", unload = TRUE)
usethis::use_data(EHR)
# 3
Rcpp::compileAttributes()
devtools::clean_dll()
devtools::document()
devtools::load_all()
#devtools::check(cran = TRUE)
#devtools::install()
devtools::build()
detach("package:MSCA", unload = TRUE)
devtools::document()
devtools::document()
devtools::document()
#devtools::check(cran = TRUE)
#devtools::install()
devtools::build()
library(Rcpp)
library(MSCA)
mat <- make_state_matrices(EHR)
sourceCpp('./src/block_jack.cpp')
sourceCpp('./src/upper_jack.cpp')
mat[ , 1:10]
dim(mat)
#d1 <- dist( t(mat) , method = 'binary')
d  <- fast_jaccard_dist( mat, as.dist = T )
#as.matrix(d1)[1:10,1:10]
as.matrix(d)[1:10,1:10]
sum( is.na( d ) )
hc <- hclust( d =  d , method = "ward.D2"  )
table(cutree(hc , k = 5))
class(d)
fcj <- fast_clara_jaccard(
data = mat,
k = 20,
samples = 20,
samplesize = NULL,
seed = 12
)
fcj
Rcpp::compileAttributes()
devtools::clean_dll()
devtools::document()
devtools::load_all()
library(Rcpp)
library(MSCA)
mat <- make_state_matrices(EHR)
sourceCpp('./src/block_jack.cpp')
sourceCpp('./src/upper_jack.cpp')
mat[ , 1:10]
dim(mat)
#d1 <- dist( t(mat) , method = 'binary')
d  <- fast_jaccard_dist( mat, as.dist = T )
#as.matrix(d1)[1:10,1:10]
as.matrix(d)[1:10,1:10]
sum( is.na( d ) )
hc <- hclust( d =  d , method = "ward.D2"  )
table(cutree(hc , k = 5))
class(d)
fjc  <- fast_jaccard_dist( mat, as.dist = F )
fcj <- fast_clara_jaccard(
data = mat,
k = 20,
samples = 20,
samplesize = NULL,
seed = 12
)
fcj
data = mat
k = 50
samples = 2
samplesize = NULL
seed = 123
frac = 1
cost_comp_ratio = 1
dim(data)
samplesize
part_method = 'pam'
maxneighbor = 0.075
numlocal = 3
### match args
tryCatch({
part_method <- match.arg(part_method, choices = c("pam", "clarans"))
}, error = function(e) {
stop("Invalid 'part_method': must be 'pam' or 'clarans'.", call. = FALSE)
})
###
if (cost_comp_ratio < 0.1) {
message("cost_comp_ratio set to 0.1 for more reliable cost estimation.")
cost_comp_ratio <- 0.1
}
###
if (cost_comp_ratio > 1) {
message("cost_comp_ratio set to 1.")
cost_comp_ratio <- 1
}
###
if (inherits(data, "dist"))
data <- as.matrix( data )
set.seed( seed )
n <- ncol( data )
if (is.null(samplesize)) samplesize <- min(40 + 3 * k, n)
###
if (  samplesize / k <  2 ) {
stop("Ratio samplesize / k <  2. Consider increasing  the sample sise or decreasing k.")
}
###
nc <- ncol(data)
cn <- colnames(data)
costs <- vector(length = samples)
best_cost <- Inf
best_result <- NULL
s_dist <- list()
s <- 1
message("Sample ", s)
# Step 1: Sample indices
cns <- sample( cn , samplesize)
sample_data <- data[, cns , drop = FALSE]
# Step 2: Compute Jaccard distance on sample (upper triangle)
d_sample <- jaccard_index_rcpp_upper(sample_data)
dimnames( d_sample ) <- list( cns , cns )
d_sample[is.na(d_sample)] <- 1
diag(d_sample) <- 0
# Step 3: PAM clustering on sample
if( part_method == 'pam' ){
part_res <- fastkmedoids::fastpam(rdist = as.dist(t(d_sample)), n = samplesize, k = k)
} else {
part_res <- fastkmedoids::fastclarans(as.dist(t(d_sample)) , n = samplesize, k = k ,
numlocal = numlocal,
maxneighbor = maxneighbor )
}
# Assignment
medoids_global <- cns[ part_res@medoids ]
medoids_global
part_res
# local cost
cns[part_res@assignment]
cost_vector <- apply( d_sample , 1 , min )
cost_vector
d_sample
diag(d_sample_c) <- 1
d_sample_c <-d_sample
diag(d_sample_c) <- 1
cost_vector <- apply( d_sample , 1 , min )
cost_vector
d_sample_c
View(d_sample_c)
upper.tri.tri(d_sample)
upper.tri(d_sample)
d_sample_c[lower.tri(d_sample)] <- NA
cost_vector <- apply( d_sample_c , 1 , min , na.rm = T )
cost_vector
cost_vector <- apply( d_sample_c , 1 , min , na.rm = T )
median(cost_vector)
sum(cost_vector)
cost_vector <- apply( d_sample_c , 2 , min , na.rm = T )
sum(cost_vector)
part_res@cost
cns[ part_res@medoids ]
part_res@medoids
d_sample
dsc2 <- d_sample_c[medoids_global,]
cost_vector <- apply( dsc2 , 2 , min , na.rm = T )
dsc2
cost_vector <- apply( dsc2 , 1 , min , na.rm = T )
sum(cost_vector)
dsc2 <- d_sample_c[,medoids_global]
cost_vector <- apply( dsc2 , 1 , min , na.rm = T )
sum(cost_vector)
medoids_global
cost_vector <- apply( dsc2 , 2 , min , na.rm = T )
sum(cost_vector)
# local cost
dsc <-d_sample
dsc[lower.tri(d_sample)] <- NA
dsc2 <- dsc[,medoids_global]
dim(dsc2)
cost_vector <- apply( dsc2 , 1 , min , na.rm = T )
dsc2
View(dsc2)
# local cost
dim(d_sample)
View(d_sample)
dsc[lower.tri(d_sample)] <- 1
# Assignment
medoids_global <- cns[ part_res@medoids ]
# local cost
dim(d_sample)
dsc <-d_sample
dsc[lower.tri(d_sample)] <- 1
dsc2 <- dsc[,medoids_global]
dim(dsc2)
cost_vector <- apply( dsc2 , 1 , min , na.rm = T )
sum(cost_vector)
View(dsc2)
dsc[lower.tri(d_sample)] <- 0
dsc2 <- dsc[,medoids_global]
dim(dsc2)
cost_vector <- apply( dsc2 , 1 , min , na.rm = T )
sum(cost_vector)
dsc[lower.tri(d_sample)] <- NA
dsc2 <- dsc[,medoids_global]
dim(dsc2)
cost_vector <- apply( dsc2 , 1 , min , na.rm = T )
sum(cost_vector)
# Assignment
medoids_global <- cns[ part_res@medoids ]
# local cost
# Assume d_sample is a symmetric n x n matrix
dsc <- d_sample
dsc[lower.tri(dsc)] <- NA  # keep only upper triangle
# Subset columns to medoids
dsc2 <- dsc[, medoids_global, drop = FALSE]
# Get minimum distance to any medoid per row
cost_vector <- apply(dsc2, 1, min, na.rm = TRUE)
# Total cost
total_cost <- sum(cost_vector)
part_res@cost
part_res <- fastkmedoids::fastclarans(as.dist(t(d_sample)) , n = samplesize, k = k ,
numlocal = numlocal,
maxneighbor = maxneighbor )
part_res@cost
part_res <- fastkmedoids::fastclarans(as.dist(t(d_sample)) , n = samplesize, k = k ,
numlocal = numlocal,
maxneighbor = maxneighbor )
part_res@cost
# local cost
# Assume d_sample is a symmetric n x n matrix
dsc <- d_sample
dsc[lower.tri(dsc)] <- 1  # keep only upper triangle
# Subset columns to medoids
dsc2 <- dsc[, medoids_global, drop = FALSE]
# Get minimum distance to any medoid per row
cost_vector <- apply(dsc2, 1, min, na.rm = TRUE)
# Total cost
sum(cost_vector)
dsc[lower.tri(dsc)] <- 2  # keep only upper triangle
# Subset columns to medoids
dsc2 <- dsc[, medoids_global, drop = FALSE]
# Get minimum distance to any medoid per row
cost_vector <- apply(dsc2, 1, min, na.rm = TRUE)
# Total cost
sum(cost_vector)
dsc[lower.tri(dsc)] <- .5  # keep only upper triangle
# Subset columns to medoids
dsc2 <- dsc[, medoids_global, drop = FALSE]
# Get minimum distance to any medoid per row
cost_vector <- apply(dsc2, 1, min, na.rm = TRUE)
# Total cost
sum(cost_vector)
as.dist(d_sample)
as.matrix(as.dist(d_sample))
d_sym <- as.matrix(Matrix::forceSymmetric(d_sample, uplo = "U"))
d_sym
dsc <- as.matrix(Matrix::forceSymmetric(d_sample, uplo = "U"))
# Subset columns to medoids
dsc2 <- dsc[, medoids_global, drop = FALSE]
# Get minimum distance to any medoid per row
cost_vector <- apply(dsc2, 1, min, na.rm = TRUE)
# Total cost
sum(cost_vector)
part_res@cost
# Get minimum distance to any medoid per row
cost_vector <- apply(dsc2, 2, min, na.rm = TRUE)
# Total cost
sum(cost_vector)
# Get minimum distance to any medoid per row
cost_vector <- apply(dsc2, 1, min, na.rm = TRUE)
# Total cost
sum(cost_vector)
# Get minimum distance to any medoid per row
cost_vector <- apply(dsc2, 1, min)
# Total cost
sum(cost_vector)
# Subset columns to medoids
dsc2 <- dsc[-medoids_global, medoids_global, drop = FALSE]
dsc2 <- dsc[setdiff(rownames(dsc), medoids_global), medoids_global, drop = FALSE]
# Get minimum distance to any medoid per row
cost_vector <- apply(dsc2, 1, min)
# Total cost
sum(cost_vector)
# Total cost
sum(cost_vector)
# Total cost
dedian(cost_vector)
# Total cost
median(cost_vector)
part_res <- fastkmedoids::fastclarans(as.dist(t(d_sample)) , n = samplesize, k = k ,
numlocal = numlocal,
maxneighbor = maxneighbor )
part_res@cost
dsc <- as.matrix(Matrix::forceSymmetric(dsc, uplo = "U"))
dsc <- as.matrix(Matrix::forceSymmetric(dsc, uplo = "U"))
# Subset columns to medoids
dsc2 <- dsc[-medoids_global, medoids_global, drop = FALSE]
# Get minimum distance to any medoid per row
cost_vector <- apply(dsc2, 1, min)
# Total cost
median(cost_vector)
# Total cost
sum(cost_vector)
part_res <- fastkmedoids::fastclarans(as.dist(t(d_sample)) , n = samplesize, k = k ,
numlocal = numlocal,
maxneighbor = maxneighbor )
part_res@cost
# local cost
# Assume d_sample is a symmetric n x n matrix
dsc <- d_sample
dsc <- as.matrix(Matrix::forceSymmetric(dsc, uplo = "U"))
# Subset columns to medoids
dsc2 <- dsc[-medoids_global, medoids_global, drop = FALSE]
part_res <- fastkmedoids::fastclarans(as.dist(t(d_sample)) , n = samplesize, k = k ,
numlocal = numlocal,
maxneighbor = maxneighbor )
part_res@cost
# local cost
# Assume d_sample is a symmetric n x n matrix
dsc <- d_sample
dsc <- as.matrix(Matrix::forceSymmetric(dsc, uplo = "U"))
# Subset columns to medoids
dsc2 <- dsc[-medoids_global, medoids_global, drop = FALSE]
# Subset columns to medoids
dsc2 <- dsc[, medoids_global, drop = FALSE]
# Get minimum distance to any medoid per row
cost_vector <- apply(dsc2, 1, min)
# Total cost
sum(cost_vector)
part_res <- fastkmedoids::fastclarans(as.dist(t(d_sample)) , n = samplesize, k = k ,
numlocal = numlocal,
maxneighbor = maxneighbor )
part_res@cost
# local cost
# Assume d_sample is a symmetric n x n matrix
dsc <- d_sample
dsc <- as.matrix(Matrix::forceSymmetric(dsc, uplo = "U"))
# Subset columns to medoids
dsc2 <- dsc[, medoids_global, drop = FALSE]
# Get minimum distance to any medoid per row
cost_vector <- apply(dsc2, 1, min)
# Total cost
sum(cost_vector)
d_sample <- as.matrix(Matrix::forceSymmetric(d_sample, uplo = "U"))
# Step 2: Compute Jaccard distance on sample (upper triangle)
d_sample <- jaccard_index_rcpp_upper(sample_data)
dimnames( d_sample ) <- list( cns , cns )
d_sample[is.na(d_sample)] <- 1
diag(d_sample) <- 0
d_sample <- as.matrix(Matrix::forceSymmetric(d_sample, uplo = "U"))
part_res <- fastkmedoids::fastpam(rdist = as.dist(t(d_sample)), n = samplesize, k = k)
part_res@cost
part_res <- fastkmedoids::fastclarans(as.dist(t(d_sample)) , n = samplesize, k = k ,
numlocal = numlocal,
maxneighbor = maxneighbor )
part_res@cost
part_res <- fastkmedoids::fastclarans(as.dist(d_sample) , n = samplesize, k = k ,
numlocal = numlocal,
maxneighbor = maxneighbor )
part_res@cost
t
part_res <- fastkmedoids::fastclarans(as.dist(t(d_sample)) , n = samplesize, k = k ,
numlocal = numlocal,
maxneighbor = maxneighbor )
part_res@cost
dsc[upper.tri(dsc)] <- NA
dsc2 <- dsc[, medoids_global, drop = FALSE]
cost_vector <- apply(dsc2, 1, min, na.rm = TRUE)
sum(cost_vector)
dsc[upper.tri(dsc)] <- NA
dsc2 <- t(dsc)[medoids_global, , drop = FALSE]  # transpose first
dsc2 <- t(dsc2)  # transpose back: rows = points, cols = medoids
cost_vector <- apply(dsc2, 1, min, na.rm = TRUE)
sum(cost_vector)
dsc_lower <- d_sample
dsc_lower[upper.tri(dsc_lower)] <- NA
# Compute cost from non-medoids to medoids using lower triangle
cost_vector <- sapply(1:nrow(dsc_lower), function(i) {
vals <- dsc_lower[i, medoids_global]
vals <- vals[!is.na(vals)]
if (length(vals) == 0) return(Inf)
min(vals)
})
sum(cost_vector)
d_cost <- jaccard_index_rcpp_parallel( data[ , medoids_global  ] , data[ , cns ] )
d_cost
# Get minimum distance to any medoid per row
cost_vector <- apply(d_cost, 1, min)
cost_vector
# Get minimum distance to any medoid per row
cost_vector <- apply(d_cost, 2, min)
cost_vector
sum(cost_vector)
sum(cost_vector,na.rm=T)
median(cost_vector,na.rm=T)
dim(d_cost)
View(d_cost)
cns
setdiff(cns,medoids_global)
d_cost <- jaccard_index_rcpp_parallel( data[ , medoids_global  ] , data[,setdiff(cns,medoids_global)])
dim(d_cost)
# Get minimum distance to any medoid per row
cost_vector <- apply(d_cost, 2 , min)
cost_vector
median(cost_vector,na.rm=T)
sum(cost_vector,na.rm=T)
