devtools::install()
# 3
devtools::clean_dll()
devtools::check()
devtools::install()
remove.packages("RcppParallel")
install.packages("RcppParallel", type = "source")
devtools::install_github("RcppCore/RcppParallel")
devtools::install()
# 3
devtools::clean_dll()
devtools::document()
devtools::load_all()
devtools::check()
devtools::install()
# 2
usethis::use_roxygen_md()
devtools::document()
# 3
devtools::clean_dll()
devtools::document()
devtools::load_all()
devtools::check()
devtools::install()
usethis::use_package("RcppParallel", type = "LinkingTo")
usethis::use_package("RcppArmadillo", type = "LinkingTo")
# 3
devtools::clean_dll()
devtools::document()
devtools::document()
devtools::load_all()
devtools::check()
devtools::install()
Sys.setenv("PKG_CPPFLAGS" = "-U__TBB_parallel_for")  # optional extra safety
remove.packages("RcppParallel")
devtools::install_github("RcppCore/RcppParallel")
devtools::clean_dll()
devtools::document()
devtools::load_all()
#devtools::check()
devtools::install()
devtools::clean_dll()
devtools::document()
devtools::load_all()
#devtools::check()
devtools::install()
devtools::clean_dll()
devtools::document()
devtools::load_all()
#devtools::check()
devtools::install()
RcppParallel::tbbParallelFor(size_t, size_t, RcppParallel::Worker&, int)
Rcpp::sourceCpp("src/task.cpp")
run_parallel_task()
Rcpp::sourceCpp("src/task.cpp")
Rcpp::sourceCpp("src/task.cpp")
Rcpp::sourceCpp("src/task.cpp")
Rcpp::sourceCpp("src/task.cpp")
#devtools::check()
devtools::install()
devtools::clean_dll()
devtools::document()
devtools::load_all()
#devtools::check()
devtools::install()
devtools::clean_dll()
devtools::document()
devtools::load_all()
#devtools::check()
devtools::install()
devtools::clean_dll()
devtools::document()
devtools::load_all()
#devtools::check()
devtools::install()
devtools::clean_dll()
devtools::document()
devtools::load_all()
#devtools::check()
devtools::install()
devtools::clean_dll()
devtools::document()
devtools::load_all()
#devtools::check()
devtools::install()
devtools::clean_dll()
devtools::document()
devtools::load_all()
#devtools::check()
devtools::install()
devtools::clean_dll()
devtools::document()
devtools::load_all()
#devtools::check()
devtools::install()
devtools::clean_dll()
devtools::document()
devtools::load_all()
#devtools::check()
devtools::install()
remove.packages("RcppParallel")
install.packages("RcppParallel", type = "source")
devtools::clean_dll()
devtools::install()
#devtools::check()
devtools::install()
install.packages("RcppParallelLibs")
#devtools::check()
devtools::install()
#devtools::check()
devtools::install()
#devtools::check()
devtools::install()
devtools::clean_dll()
devtools::document()
devtools::load_all()
#devtools::check()
devtools::install()
devtools::clean_dll()
devtools::document()
devtools::load_all()
#devtools::check()
devtools::install()
devtools::clean_dll()
devtools::document()
devtools::load_all()
#devtools::check()
devtools::install()
devtools::clean_dll()
devtools::document()
devtools::load_all()
#devtools::check()
devtools::install()
#devtools::check()
devtools::install()
library(MSCA)
#devtools::check()
devtools::install()
library(MSCA)
mat <- make_state_matrix(EHR)
#devtools::check()
devtools::install()
devtools::clean_dll()
devtools::document()
Rcpp::compileAttributes()
devtools::clean_dll()
devtools::document()
# 3
devtools::clean_dll()
Rcpp::compileAttributes()
devtools::document()
devtools::clean_dll()
Rcpp::compileAttributes()
devtools::document()
# 3
devtools::clean_dll()
Rcpp::compileAttributes()
devtools::document()
devtools::load_all()
#devtools::check()
devtools::install()
devtools::load_all()
# devtools::clean_dll()
devtools::document()
# devtools::clean_dll()
devtools::document()
# devtools::clean_dll()
devtools::document()
devtools::load_all()
#devtools::check()
devtools::install()
mat <- make_state_matrix(EHR)
mat[ , 1:10]
d1 <- dist( t(mat[,1000]) , method = 'binary')
d1 <- dist( t(mat[,2000]) , method = 'binary')
d1 <- dist( t(mat[,]) , method = 'binary')
dim(mat)
d  <- fast_jaccard_dist( mat )
devtools::document()
devtools::load_all()
#devtools::check()
devtools::install()
devtools::document()
devtools::load_all()
#devtools::check()
devtools::install()
devtools::document()
devtools::load_all()
#devtools::check()
devtools::install()
devtools::load_all(".")
devtools::document()
devtools::load_all()
#devtools::check()
devtools::install()
devtools::load_all(".")
# devtools::clean_dll()
devtools::document()
devtools::load_all()
#devtools::check()
devtools::install()
devtools::document()
devtools::load_all()
devtools::build_vignettes()
# devtools::clean_dll()
devtools::document()
devtools::load_all()
rmarkdown::render()
rmarkdown::render('./vignette/MSCA.Rmd')
# devtools::clean_dll()
devtools::document()
devtools::load_all()
#devtools::check()
#devtools::install()
devtools::build()
devtools::install(build_vignettes = TRUE)
devtools::install(build_vignettes = TRUE, upgrade = "never", reload = TRUE, force = TRUE)
devtools::install(build_vignettes = TRUE)
#devtools::check()
#devtools::install()
devtools::build()
devtools::install(build_vignettes = TRUE, upgrade = "never", reload = TRUE, force = TRUE)
devtools::install(build_vignettes = TRUE, upgrade = "never", reload = TRUE, force = TRUE)
devtools::build_vignettes()
devtools::build_vignettes('./vignette/MSCA.Rmd')
devtools::build_vignettes('./vignette/')
devtools::install(build_vignettes = TRUE, upgrade = "never", reload = TRUE, force = TRUE)
vignette(package = "MSCA")
usethis::use_vignette()
usethis::use_vignette('MSCA')
devtools::build_vignettes()
devtools::install(build_vignettes = TRUE, upgrade = "never", reload = TRUE, force = TRUE)
library(microbenchmark)
benchmark_jaccard <- function(max_cols = 100, step = 10) {
times <- data.frame()
for (n in seq(step, max_cols, by = step)) {
mat <- matrix(sample(c(0,1,NA), 100 * n, replace = TRUE, prob = c(0.45,0.45,0.1)), nrow = 100)
colnames(mat) <- paste0("id", seq_len(n))
mb <- microbenchmark(
dist = dist(t(mat), method = "binary"),
fast = fast_jaccard_dist(mat),
times = 10
)
mb_summary <- summary(mb)[, c("expr", "mean")]
mb_summary$ncol <- n
times <- rbind(times, mb_summary)
}
return(times)
}
results <- benchmark_jaccard(200, 20)
library(microbenchmark)
benchmark_jaccard <- function(max_cols = 100, step = 10) {
times <- data.frame()
for (n in seq(step, max_cols, by = step)) {
mat <- matrix(sample(c(0,1,NA), 100 * n, replace = TRUE, prob = c(0.45,0.45,0.1)), nrow = 100)
colnames(mat) <- paste0("id", seq_len(n))
mb <- microbenchmark(
dist = dist(t(mat), method = "binary"),
fast = fast_jaccard_dist(mat),
times = 10
)
mb_summary <- summary(mb)[, c("expr", "mean")]
mb_summary$ncol <- n
times <- rbind(times, mb_summary)
}
return(times)
}
results <- benchmark_jaccard(200, 20)
devtools::load_all(".")
results <- benchmark_jaccard(200, 20)
print(results)
ggplot( data = results , aes( x = ncol , y = mean , col = expr)) +
geom_line()
library( ggplot2)
results <- benchmark_jaccard(200, 20)
print(results)
ggplot( data = results , aes( x = ncol , y = mean , col = expr)) +
geom_line()
results <- benchmark_jaccard(200, 19)
print(results)
ggplot( data = results , aes( x = ncol , y = mean , col = expr)) +
geom_line()
results <- benchmark_jaccard(1000, 250)
print(results)
ggplot( data = results , aes( x = ncol , y = mean , col = expr)) +
geom_line()
library(MSCA)
library(dplyr)
data(EHR)
head(EHR)
EHR %>%
nrow()
library( cluster )
library( fastcluster )
# Get a hierachical clustering using the built in hclust function
h_mat <- hclust(d = d_mat , method = 'ward.D2' )
h_mat
# Get a typology
ct_mat_8 <- cutree( h_mat , k = 8 )
table( ct_mat_8 )
d  <- fast_jaccard_dist( mat )
library(MSCA)
mat <- make_state_matrix(EHR)
mat[ , 1:10]
dim(mat)
d  <- fast_jaccard_dist( mat )
dim(d)
hc <- hclust( d = t(d) )
dim(d)
hc <- hclust( d = t(d) , method = 'ward.D2' )
d[1:10,1:10]
hc <- hclust( d = (d) , method = 'ward.D2' )
hc <- hclust( d , method = 'ward.D2' )
hc <- hclust( d =  d , method = 'ward.D2' )
hc <- hclust( d =  d  )
d1 <- dist( t(mat[,1:100]) , method = 'binary')
hc <- hclust( d =  d1  )
d  <- fast_jaccard_dist( mat[,1:100] )
dim(d)
d1[1:10,1:10]
d  <- fast_jaccard_dist( mat[,1:100] , as.dist = T )
dim(d)
d1[1:10,1:10]
d[1:10,1:10]
hc <- hclust( d =  d1  )
hc <- hclust( d =  d  )
# Get a hierachical clustering using the built in hclust function
h_mat <- hclust(d = d_mat , method = 'ward.D2' )
library( cluster )
library( fastcluster )
# Compute the jaccard distance
d_mat <- fast_jaccard_dist( s_mat , as.dist = TRUE )
s_mat <- make_state_matrix(
data = EHR,
id = "link_id",
ltc = "reg",
aos = "aos",
l = 111,
fail_code = "death",
cens_code = "cens"
)
dim( s_mat )
library( cluster )
library( fastcluster )
# Compute the jaccard distance
d_mat <- fast_jaccard_dist( s_mat , as.dist = TRUE )
h_mat
# Get a hierachical clustering using the built in hclust function
h_mat <- hclust(d = d_mat , method = 'ward.D2' )
h_mat
# Get a typology
ct_mat_8 <- cutree( h_mat , k = 8 )
table( ct_mat_8 )
hc <- hclust( d =  d  )
cutree(hc , k = 8)
table(cutree(hc , k = 8))
d1 <- dist( t(mat[,1:100]) , method = 'binary')
hc <- hclust( d =  d1  )
table(cutree(hc , k = 8))
d1 <- dist( t(mat) , method = 'binary')
dim( d1 )
d1[1:10,1:10]
as.matrix(d1)[1:10,1:10]
as.matrix(d)[1:10,1:10]
d  <- fast_jaccard_dist( mat, as.dist = T )
as.matrix(d)[1:10,1:10]
d  <- fast_jaccard_dist( mat, as.dist = F )
as.matrix(d)[1:10,1:10]
as.matrix(d1)[1:10,1:10]
hc <- hclust( d =  d1  )
table(cutree(hc , k = 8))
hc <- hclust( d =  d  )
table(cutree(hc , k = 5))
hc <- hclust( d =  d , method = "ward.D2"  )
hc <- hclust( d =  d1 , method = "ward.D2"  )
table(cutree(hc , k = 5))
d  <- fast_jaccard_dist( mat, as.dist = T )
dim( d )
as.matrix(d)[1:10,1:10]
# devtools::clean_dll()
devtools::document()
devtools::load_all()
#devtools::check()
#devtools::install()
devtools::build()
devtools::install(build_vignettes = F)
library(MSCA)
mat <- make_state_matrix(EHR)
library(MSCA)
mat <- make_state_matrix(EHR)
mat[ , 1:10]
dim(mat)
d  <- fast_jaccard_dist( mat, as.dist = T )
dim( d )
as.matrix(d)[1:10,1:10]
hc <- hclust( d =  d1 , method = "ward.D2"  )
hc <- hclust( d =  d , method = "ward.D2"  )
hc <- hclust( d =  d , method = "ward.D2"  )
d  <- fast_jaccard_dist( mat, as.dist = F )
dim( d )
sum( is.na( d ) )
#res <- .Call('_MSCA_jaccard_index_rcpp_upper', mat)
res <- .Call('_MSCA_jaccard_index_rcpp_upper', mat)
res[is.na(res)] <- 1
res <- Matrix::forceSymmetric(Matrix::Matrix(res, sparse = FALSE), uplo = "U")
coln <- colnames(mat)
dimnames(res) <- list(coln, coln)
if (as.dist) return(as.dist(res))
res
#devtools::check()
#devtools::install()
devtools::build()
devtools::install(build_vignettes = F)
library(MSCA)
mat <- make_state_matrix(EHR)
library(MSCA)
mat <- make_state_matrix(EHR)
mat[ , 1:10]
dim(mat)
d  <- fast_jaccard_dist( mat, as.dist = F )
dim( d )
as.matrix(d1)[1:10,1:10]
as.matrix(d)[1:10,1:10]
sum( is.na( d ) )
hc <- hclust( d =  d , method = "ward.D2"  )
d  <- fast_jaccard_dist( mat, as.dist = T )
hc <- hclust( d =  d , method = "ward.D2"  )
table(cutree(hc , k = 5))
library(MSCA)
library(dplyr)
data(EHR)
head(EHR)
EHR %>%
nrow()
library( cluster )
library( fastcluster )
# Compute the jaccard distance
d_mat <- fast_jaccard_dist( s_mat , as.dist = TRUE )
# Get a hierachical clustering using the built in hclust function
h_mat <- hclust(d = d_mat , method = 'ward.D2' )
h_mat
# Get a typology
ct_mat_8 <- cutree( h_mat  )
table( ct_mat_8 )
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(MSCA)
library(dplyr)
data(EHR)
head(EHR)
EHR %>%
nrow()
EHR %>%
group_by( reg ) %>%
tally
s_mat <- make_state_matrix(
data = EHR,
id = "link_id",
ltc = "reg",
aos = "aos",
l = 111,
fail_code = "death",
cens_code = "cens"
)
dim( s_mat )
library( cluster )
library( fastcluster )
# Compute the jaccard distance
d_mat <- fast_jaccard_dist( s_mat , as.dist = TRUE )
# Get a hierachical clustering using the built in hclust function
h_mat <- hclust(d = d_mat , method = 'ward.D2' )
h_mat
# Get a typology
ct_mat_8 <- cutree( h_mat  )
ct_mat_8 <- cutree( h_mat , k = 8 )
table( ct_mat_8 )
devtools::install(build_vignettes = T)
library(MSCA)
Rcpp::compileAttributes()
devtools::clean_dll()
devtools::document()
devtools::load_all()
devtools::install(build_vignettes = T)
#devtools::install()
devtools::build()
Rcpp::compileAttributes()
devtools::clean_dll()
devtools::document()
devtools::load_all()
devtools::check(cran = TRUE)
#devtools::install()
devtools::build()
devtools::install(build_vignettes = T)
Rcpp::compileAttributes()
devtools::clean_dll()
devtools::document()
devtools::load_all()
devtools::check(cran = TRUE)
Rcpp::compileAttributes()
devtools::clean_dll()
devtools::document()
devtools::load_all()
devtools::check(cran = TRUE)
Rcpp::compileAttributes()
devtools::clean_dll()
devtools::document()
devtools::load_all()
devtools::check(cran = TRUE)
#devtools::install()
devtools::build()
